{
  "section": {
    "title": "프로젝트 소개",
    "date": "개발 기간",
    "skill": "사용 기술",
    "problem": "문제 & 해결 과정",
    "button": "More Details...",
    "blogLink": "블로그 포스트로 자세히 보기"
  },
  "contents": [
    {
      "name": "Inference Service 페이지 개발",
      "introduction": ["MLFlow, aws s3, huggingface 등 모델들을 배포하고 관리하는 페이지를 개발했습니다.", "사용자가 배포된 모델의 성능을 한눈에 파악할 수 있도록 데이터를 시각화하고, 배포 프로세스를 만드는 것이 주 업무였습니다."],
      "goal": "모델 배포 프로세스 단순화, 실시간 데이터 모니터링 최적화, UX 개선",
      "skills": ["React", "Typescript", "React-query", "react-hook-form", "Echarts"],
      "dates": ["2023.01 ~ 2025.04"],
      "sections": [
        {
          "title": "Prometheus 기반의 복잡한 메트릭 데이터를 ECharts를 통해 실시간 시각화",
          "contents": ["Prometheus 기반 지표(지연 시간, 요청 수, 실패율 등)를 시각화하는 과정에서, 차트 간 동기화 및 툴팁 연동/줌 기능 구현 등 복잡한 인터랙션 요구사항을 해결", "사용자들이 문제 상황을 직관적으로 파악할 수 있게 되어, 유저들의 운영 효율이 향상"]
        },
        {
          "title": "레거시 폼 코드의 구조적 리팩토링 및 점진적 이관",
          "contents": ["기존 폼 컴포넌트가 다양한 모델을 커버하기에 한계가 있어, 중복된 폼 구조를 추상화하고 useFormContext 기반의 모듈화 작업 진행", "기존 폼들도 중단 없이 리팩토링 대상에 포함시켜 점진적 전환을 성공적으로 수행"]
        },
        {
          "title": "중첩된 Form 구조 추상화: useFormContextHelpers 커스텀 훅 개발",
          "contents": [
            "중첩된 Form 구조에서 useFormContext 사용 시 반복되던 경로 관리 문제 해결",
            "basePath 기반으로 하위 필드 경로를 자동 구성하는 인터페이스 제공",
            "watch, setValue, getValues, error 등 기능을 통합하여 일관된 Form 조작 가능",
            "중첩 폼 내 필드 접근의 일관성 확보, 버그 발생률 감소, 유지보수성 향상",
            "해당 훅 도입 후 신규 기능 개발 속도 가시적으로 개선, 기존 로직도 점진적으로 마이그레이션"
          ],
          "link": "https://velog.io/@adc0612/react-hook-form-useFormContext-custom-hook-만들어-중첩된-폼-쉽게-관리하기"
        }
      ],
      "imageName": "inference-service.gif"
    },
    {
      "name": "Experiment 페이지 개발 및 개선",
      "introduction": ["ML 실험 결과와 이력을 비교 관리하는 고도화된 실험 관리 도구 UI를 개발했습니다.", "데이터량이 많고, 테이블 상호작용 요구가 까다로운 상황에서, 성능과 사용성 사이의 균형을 맞추는 문제 해결 경험이 있었습니다."],
      "goal": "데이터 탐색 및 실험 관리 효율화",
      "skills": ["React", "Typescript", "React-query", "ag-grid"],
      "dates": ["2023.01 ~ 2024.06"],
      "sections": [
        {
          "title": "고도화된 테이블 UX를 위한 AG Grid 전환 및 통합",
          "contents": ["기존 MUI Table로는 고객 요청(필터링, 정렬, 그룹핑 등)을 충족하기 어려워 AG Grid로 전환", "기존 테이블 이벤트와 함수도 작동할 수 있게 Ag Grid를 커스텀하여 마이그레이션 부담을 최소화"]
        },
        {
          "title": "대용량 데이터 대응을 위한 Infinite Scroll 구조 설계",
          "contents": ["초기에는 서버 지연 이슈로 UX가 나빠지는 상황 → 클라이언트 단의 페이지네이션 구조를 무한 스크롤로 전환", "사용자 응답 속도가 개선되고, 서버 부하도 분산"]
        },
        {
          "title": "실험 결과물에 대한 시각화 컴포넌트 직접 설계",
          "contents": ["사용자 피드백을 바탕으로, 파일 트리 + 코드 뷰어 UI를 브라우저 상에서 커스텀 구현", "실험 분석 시간을 단축하고, 실험 반복 효율이 증가"]
        },
        {
          "title": "반복되는 테이블 구성 로직을 유틸화 및 모듈화",
          "contents": ["필터/정렬 등 반복 사용되는 로직을 내부 공통 유틸로 구성 → 다른 프로젝트에서도 재사용 가능한 형태로 확장"]
        }
      ],
      "imageName": "experiment.gif"
    },
    {
      "name": "AutoML 페이지 개발",
      "introduction": ["경량화된 AutoML 결과 페이지를 빠르게 개발하는 프로젝트였습니다.", "짧은 기간 내 안정적인 결과물이 필요했기에, 신규 기술 도입과 빠른 프로토타이핑을 목표로 했습니다."],
      "goal": "MVP 개발 속도 향상, 가벼운 인터랙션 성능 최적화",
      "skills": ["Svelte"],
      "dates": ["2024.09 ~ 2024.11"],
      "sections": [
        {
          "title": "렌더링 최적화를 고려한 Svelte 도입 및 구조 설계",
          "contents": ["빠른 필터링/정렬이 요구되는 환경에서 React보다 반응성이 뛰어난 Svelte 도입", "상태 관리와 컴포넌트 설계를 직접 구성하여 경량 UI 구현"]
        }
      ],
      "imageName": "automl.gif"
    },
    {
      "name": "Runway Notification 기능 추가",
      "introduction": ["모델 배포, 파이프라인 실행 등 주요 이벤트에 대해 실시간 알림 기능을 추가하는 프로젝트였습니다"],
      "goal": "실시간 알림 제공, 데이터 탐색 효율화",
      "skills": ["React", "Typescript", "React-query"],
      "dates": ["2024.10 ~ 2024.11"],
      "sections": [
        {
          "title": "기존 계획은 'Load More' 방식 → UX 비효율적",
          "contents": ["Infinite Scroll 도입 → 스크롤 기반 데이터 로딩 최적화", "단순 목록 나열이 아닌, 읽음 처리, 이벤트 필터링, 무한 스크롤 기능을 조합하여 UX를 개선"]
        }
      ],
      "imageName": "notification.gif"
    }
  ]
}
